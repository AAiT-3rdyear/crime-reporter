// Mocks generated by Mockito 5.2.0 from annotations
// in crime_reporter/test/police_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'police_repository_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLogger_0 extends _i1.Fake implements _i2.Logger {}

/// A class which mocks [PoliceRepoTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockPoliceRepoTest extends _i1.Mock implements _i3.PoliceRepoTest {
  MockPoliceRepoTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  _i2.Logger get logger => (super.noSuchMethod(Invocation.getter(#logger),
      returnValue: _FakeLogger_0()) as _i2.Logger);
  @override
  set logger(_i2.Logger? _logger) =>
      super.noSuchMethod(Invocation.setter(#logger, _logger),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic> getOngoingCrimes(dynamic user) =>
      (super.noSuchMethod(Invocation.method(#getOngoingCrimes, [user]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> getSolvedCrimes(dynamic user) =>
      (super.noSuchMethod(Invocation.method(#getSolvedCrimes, [user]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  dynamic getReportedCrime(String? jeson) =>
      super.noSuchMethod(Invocation.method(#getReportedCrime, [jeson]));
  @override
  _i4.Future<dynamic> deleteCrime(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#deleteCrime, [id]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> moveToOngoing(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#moveToOngoing, [id]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> moveToSolved(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#moveToSolved, [id]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}
